# Generated by Django 4.1 on 2022-09-16 06:53

from django.db import migrations, models
import django.db.models.deletion
import shop_products.models.brands
import shop_products.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BrandProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Наименование бренда', max_length=100, unique=True, verbose_name='Бренд')),
                ('photo', models.ImageField(help_text='Картинка, которая отображается на главном экране, при выборе бренда', upload_to=shop_products.models.brands.upload_to, verbose_name='Логотип бренда')),
                ('description', models.TextField(help_text='Описание, которое отображается на странице бренда', verbose_name='Описание бренда')),
                ('email', models.EmailField(help_text='Email тех.поддержки бренда', max_length=254, verbose_name='Email')),
                ('show', models.BooleanField(default=True, help_text='Флаг, который позволяет регулировать отображение бренда на страницах', verbose_name='Флаг показа бренда')),
            ],
            options={
                'verbose_name': 'Бренд',
                'verbose_name_plural': 'Бренды',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CategoryProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Название категории товара', max_length=100, unique=True, validators=[shop_products.validators.validate_category_name], verbose_name='Категория')),
                ('photo', models.ImageField(help_text='Картинка, которая отображается на главном экране, при выборе категории', upload_to='test/', verbose_name='Фото категории')),
            ],
            options={
                'verbose_name': 'Категория товара',
                'verbose_name_plural': 'Категории товаров',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True, verbose_name='Наименование товара')),
                ('price', models.IntegerField(default=0, help_text='Цена товара, по умолчанию 0', verbose_name='Цена товара')),
                ('count', models.IntegerField(default=0, help_text='Количество товаров на складе (сколько можно продать товаров)', verbose_name='Количество')),
                ('description', models.TextField(verbose_name='Описание товара')),
                ('show', models.BooleanField(default=True, help_text='Флаг, который позволяет регулировать отображение товара на страницах', verbose_name='Флаг показа товара')),
                ('brand', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.brandproduct', verbose_name='Бренд')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_products.categoryproduct', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='VideoProcessorVideoCartSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nominal_frequency', models.IntegerField(help_text='МГц', verbose_name='Частота процессора')),
                ('turbo_frequency', models.IntegerField(help_text='МГц', verbose_name='Турбочастота')),
                ('number_universal_processors', models.IntegerField(verbose_name='Количество универсальных процессоров')),
                ('number_texture_units', models.IntegerField(verbose_name='Число текстурных блоков')),
                ('number_rasterization_blocks', models.IntegerField(verbose_name='Число блоков растеризации')),
                ('ray_tracing_support', models.BooleanField(default=False, verbose_name='Поддержка трассировки лучей')),
                ('hardware_accelerated_ray_tracing', models.IntegerField(verbose_name='Аппаратное ускорение трассировки лучей')),
                ('tensor_cores', models.IntegerField(verbose_name='Тензорные ядра')),
                ('shader_version', models.DecimalField(decimal_places=2, max_digits=3, verbose_name='Версия шейдеров')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Спецификация видеопроцессора',
                'verbose_name_plural': 'Спецификация видеопроцессора',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='VideoMemoryVideoCartSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_memory_size', models.IntegerField(help_text='Гб', verbose_name='Объем видеопамяти')),
                ('memory_type', models.CharField(max_length=50, verbose_name='Тип памяти')),
                ('memory_bus_width', models.IntegerField(help_text='бит', verbose_name='Разрядность шины памяти')),
                ('maximum_memory_bandwidth', models.IntegerField(help_text='Гбайт/сек', verbose_name='Максимальная пропускная способность памяти')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Спецификация видеопамяти',
                'verbose_name_plural': 'Спецификация видеопамяти',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='TimingsRamSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cl', models.IntegerField(verbose_name='CAS Latency (CL)')),
                ('trcd', models.IntegerField(verbose_name='RAS to CAS Delay (tRCD)')),
                ('trp', models.IntegerField(verbose_name='Row Precharge Delay (tRP)')),
                ('tras', models.IntegerField(verbose_name='Activate to Precharge Delay (tRAS)')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Тайминги',
                'verbose_name_plural': 'Тайминги',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='ThermalCharacteristicsProcessorSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tdp', models.IntegerField(verbose_name='Тепловыделение (TDP)')),
                ('base_heat_dissipation', models.IntegerField(verbose_name='Базовое тепловыделение')),
                ('max_cpu_temperature', models.IntegerField(verbose_name='Максимальная температура процессора')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Тепловые характеристики',
                'verbose_name_plural': 'Тепловые характеристики',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='StorageDeviceHDDSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hdd_volume', models.IntegerField(help_text='Гб', verbose_name='Объем')),
                ('cache_size', models.IntegerField(help_text='Мб', verbose_name='Объем кэш-памяти')),
                ('spindle_speed', models.IntegerField(help_text='об/мин', verbose_name='Скорость вращения шпинделя')),
                ('max_data_rate', models.IntegerField(help_text='Мбайт/сек', verbose_name='Максимальная скорость передачи данных')),
                ('average_latency', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Среднее время задержки')),
                ('interface', models.CharField(default='SATA 3', max_length=15, verbose_name='Интерфейс')),
                ('interface_bandwidth', models.IntegerField(default=6, help_text='ГБит/с', verbose_name='Пропускная способность интерфейса')),
                ('optimization_raid_arrays', models.BooleanField(default=False, verbose_name='Возможность оптимизации под RAID-масс.')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Накопитель',
                'verbose_name_plural': 'Накопитель',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='StorageControllersMotherboardSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_m2_connectors', models.IntegerField(verbose_name='Количество разъемов M2')),
                ('m2_connectors', models.CharField(max_length=50, verbose_name='Разъемы M2')),
                ('number_sata_ports', models.IntegerField(verbose_name='Количество разъемов SATA')),
                ('sata_raid_mode', models.CharField(max_length=50, verbose_name='Режим работы SATA RAID')),
                ('nvme_support', models.BooleanField(default=False, verbose_name='Поддержка NVMe')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Контроллеры накопителей',
                'verbose_name_plural': 'Контроллеры накопителей',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='ServiceComputerCaseSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fixing_side_panels', models.CharField(default='Сбоку', max_length=10, verbose_name='Фиксация боковых панелей')),
                ('cutout_area_mounting_cpu_cooler', models.BooleanField(default=False, verbose_name='Вырез в районе крепления кулера')),
                ('rear_cable_routing', models.BooleanField(default=False, verbose_name='Прокладка кабелей за задней стенкой')),
                ('dust_filter', models.BooleanField(default=False, verbose_name='Пылевой фильтр')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Обслуживание',
                'verbose_name_plural': 'Обслуживание',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='ReliabilitySolidStateDriveSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tbw', models.IntegerField(help_text='ТБ', verbose_name='Максимальный ресурс записи (TBW)')),
                ('dwpd', models.FloatField(verbose_name='DWPD')),
                ('max_overload', models.IntegerField(help_text='G', verbose_name='Максимальная перегрузка')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Надежность',
                'verbose_name_plural': 'Надежность',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='RamOptionsProcessorSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('memory_type', models.CharField(help_text='Тип оперативной памяти, который поддерживает данный процессор', max_length=4, verbose_name='Тип оперативной памяти')),
                ('maximum_supported_memory', models.IntegerField(help_text='Максимальный объем оперативной памяти, который поддерживает данный процессор', verbose_name='Максимальный объем оперативной памяти')),
                ('number_channels', models.IntegerField(help_text='Количество каналов оперативной памяти, который поддерживает данный процессор', verbose_name='Количество каналов')),
                ('maximum_ram_frequency', models.IntegerField(help_text='Максимальная частота оперативной памяти, который поддерживает данный процессор', verbose_name='Максимальная частота')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Параметры оперативной памяти',
                'verbose_name_plural': 'Параметры оперативной памяти',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='RadiatorCoolerSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_material', models.CharField(max_length=25, verbose_name='Материал основания')),
                ('radiator_material', models.CharField(max_length=25, verbose_name='Материал радиатора')),
                ('number_heat_pipes', models.IntegerField(verbose_name='Количество тепловых трубок')),
                ('heat_pipe_diameter', models.IntegerField(help_text='мм.', verbose_name='Диаметр тепловых трубок')),
                ('nickel_plated', models.CharField(max_length=50, verbose_name='Никелированное покрытие')),
                ('radiator_color', models.CharField(max_length=25, verbose_name='Цвет радиатора')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Радиатор',
                'verbose_name_plural': 'Радиатор',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='ProcessorChipsetMotherboardSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('socket', models.CharField(max_length=50, verbose_name='Сокет')),
                ('chipset', models.CharField(max_length=50, verbose_name='Чипсет')),
                ('compatible_processor_cores', models.CharField(max_length=100, verbose_name='Совместимые ядра процессоров')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Процессор и чипсет',
                'verbose_name_plural': 'Процессор и чипсет',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='PhotoProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='products/<django.db.models.fields.related.ForeignKey>/images/', verbose_name='Фотографии товара')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product')),
            ],
        ),
        migrations.CreateModel(
            name='PerformanceRamSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clock_frequency', models.IntegerField(help_text='МГц', verbose_name='Тактовая частота')),
                ('xmp_profiles', models.CharField(max_length=25, verbose_name='Профили XMP')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Быстродействие',
                'verbose_name_plural': 'Быстродействие',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceIndicatorsSolidStateDriveSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_sequential_read_speed', models.IntegerField(verbose_name='Максимальная скорость последовательного чтения')),
                ('max_sequential_write_speed', models.IntegerField(verbose_name='Максимальная скорость последовательной записи')),
                ('random_read_speed_qd32', models.IntegerField(verbose_name='Скорость произвольного чтения 4 Кб файлов (QD32)')),
                ('random_write_speed_qd32', models.IntegerField(verbose_name='Скорость произвольной записи 4 Кб файлов (QD32)')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Показатели производительности',
                'verbose_name_plural': 'Показатели производительности',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='OutputImageVideoCartSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_connectors', models.CharField(max_length=100, verbose_name='Видеоразъемы')),
                ('hdmi_version', models.DecimalField(decimal_places=2, max_digits=3, verbose_name='Версия HDMI')),
                ('display_port_version', models.DecimalField(decimal_places=2, max_digits=3, verbose_name='Версия DisplayPort')),
                ('number_monitors', models.IntegerField(verbose_name='Количество подключаемых одновременно мониторов')),
                ('maximum_resolution', models.CharField(max_length=25, verbose_name='Максимальное разрешение')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Вывод изображения',
                'verbose_name_plural': 'Вывод изображения',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='NetMotherboardSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('network_adapter_speed', models.IntegerField(help_text='Гбит/с', verbose_name='Скорость сетевого адаптера')),
                ('network_adapter_chipset', models.CharField(max_length=50, verbose_name='Чипсет сетевого адаптера')),
                ('wifi_adapter', models.CharField(max_length=50, verbose_name='Встроенный адаптер Wi-Fi')),
                ('wifi_controller', models.CharField(max_length=50, verbose_name='Контроллер Wi-Fi')),
                ('bluetooth', models.CharField(max_length=25, verbose_name='Bluetooth')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Сеть',
                'verbose_name_plural': 'Сеть',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='MemoryMotherboardSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numbers_slot', models.IntegerField(verbose_name='Количество слотов поддерживаемой памяти')),
                ('form_factor', models.CharField(choices=[('DDR DIMM', 'Ddr'), ('SDRAM DIMM', 'Sdram'), ('SIMM (72-pin)', 'Simm 72'), ('SIPP', 'Sipp'), ('SIMM (30-pin)', 'Simm 30')], max_length=15, verbose_name='Форм фактор поддерживаемой памяти')),
                ('supported_memory', models.CharField(choices=[('DDR', 'Ddr'), ('DDR2', 'Ddr 2'), ('DDR3', 'Ddr 3'), ('DDR4', 'Ddr 4'), ('DDR5', 'Ddr 5')], max_length=5, verbose_name='Тип поддерживаемой памяти')),
                ('number_channels', models.IntegerField(verbose_name='Количество каналов памяти')),
                ('maximum_memory', models.IntegerField(verbose_name='Максимальный поддерживаемый объем памяти')),
                ('maximum_memory_frequency', models.IntegerField(help_text='Без разгона', verbose_name='Максимальная частота памяти')),
                ('frequency_overclocking', models.IntegerField(verbose_name='Максимальная частота памяти с учетом разгона')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Память',
                'verbose_name_plural': 'Память',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='MechanicsReliabilityHDDSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recording_technology', models.CharField(default='CMR', max_length=10, verbose_name='Технология записи')),
                ('shock_resistance_wort', models.IntegerField(help_text='G', verbose_name='Ударность при падении')),
                ('with_helium_filling', models.BooleanField(default=False, verbose_name='С гелиевым наполнением')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Механика и надежность',
                'verbose_name_plural': 'Механика и надежность',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='MainParametersVideoCartSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gpu', models.CharField(max_length=50, verbose_name='Графический процессор')),
                ('microarchitecture', models.CharField(max_length=50, verbose_name='Миркроархитектура')),
                ('technical_process', models.IntegerField(verbose_name='Техпроцесс')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Основные параметры',
                'verbose_name_plural': 'Основные параметры',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='MainCharacteristicsSolidStateDriveSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('storage_capacity', models.IntegerField(help_text='Гб', verbose_name='Объект накопителя')),
                ('nvme', models.BooleanField(default=False, verbose_name='Поддержка NVMе')),
                ('connection_connector', models.CharField(max_length=10, verbose_name='Разъем подключения')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Основные характеристики',
                'verbose_name_plural': 'Основные характеристики',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='InternalConnectorsMotherboardSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internal_usb_connectors', models.CharField(max_length=100, verbose_name='Внутренние коннекторы USB на плате')),
                ('cpu_cooler_power', models.CharField(max_length=50, verbose_name='Разъем питания процессорного кулера')),
                ('pin_pwm_fan_4', models.IntegerField(verbose_name='4-Pin PWM коннекторы для вентиляторов')),
                ('pin_fan_3', models.IntegerField(verbose_name='3-Pin коннекторы для вентиляторов')),
                ('pin_led_3', models.IntegerField(verbose_name='Разъем светодиодов 3-Pin (+5V-D-G)')),
                ('pin_led_4', models.IntegerField(verbose_name='Разъем светодиодов 4-Pin (+12V-G-R-B)')),
                ('m2_e_key', models.BooleanField(default=False, verbose_name='M.2 ключ Е')),
                ('lpt_interface', models.BooleanField(default=False, verbose_name='Интерфейс LPT')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Внутренние коннекторы',
                'verbose_name_plural': 'Внутренние коннекторы',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='GraphicsCoreProcessorSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('integrated_graphics_core', models.BooleanField(default=False, verbose_name='Встроенное графическое ядро')),
                ('gpu_model', models.CharField(max_length=50, verbose_name='Модель графического ядра')),
                ('maximum_frequency', models.IntegerField(help_text='Гц', verbose_name='Частота графического ядра')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Графическое ядро',
                'verbose_name_plural': 'Графические ядра',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='FrontPanelConnectorsComputerCaseSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('io_panel_layout', models.CharField(default='Спереди', max_length=7, verbose_name='Расположение I/O панели')),
                ('connectors', models.CharField(max_length=100, verbose_name='Разъемы')),
                ('built_card_reader', models.BooleanField(default=False, verbose_name='Наличие кард-ридера')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Разъемы и интерфейсы лицевой панели',
                'verbose_name_plural': 'Разъемы и интерфейсы лицевой панели',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='FrequencyOverclockingProcessorSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpu_base_frequency', models.IntegerField(help_text='Гц', verbose_name='Базовая частота процессора')),
                ('maximum_turbo_frequency', models.IntegerField(help_text='Гц', verbose_name='Максимальная частота процессора в турбо режиме')),
                ('base_frequency_efficient_cores', models.IntegerField(help_text='Гц', verbose_name='Базовая частота энергоэффективных ядер процессора')),
                ('turbo_frequency_efficient_cores', models.IntegerField(help_text='Гц', verbose_name='Максимальная частота энергоэффективных ядер процессора в турбо режиме')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Частота и возможность разгона',
                'verbose_name_plural': 'Частота и возможность разгона',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='FormFactorDimensionsMotherboardSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form_factor', models.CharField(choices=[('EATX', 'Eatx'), ('ATX', 'Atx'), ('micro-ATX', 'Micro Atx'), ('mini-ITX', 'Mini Itx')], max_length=10, verbose_name='Форм-фактор')),
                ('height', models.IntegerField(help_text='мм.', verbose_name='Высота')),
                ('width', models.IntegerField(help_text='мм.', verbose_name='Ширина')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Форм-фактор и размеры',
                'verbose_name_plural': 'Форм-фактор и размеры',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='FormFactorComputerCaseSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frame_size', models.CharField(max_length=25, verbose_name='Типоразмер корпуса')),
                ('motherboard_orientation', models.CharField(choices=[('Горизонтально', 'Horizontal'), ('Вертикально', 'Vertical')], max_length=13, verbose_name='Ориентация материнской платы')),
                ('length', models.IntegerField(help_text='мм.', verbose_name='Длина')),
                ('width', models.IntegerField(help_text='мм.', verbose_name='Ширина')),
                ('height', models.IntegerField(help_text='мм.', verbose_name='Высота')),
                ('weight', models.IntegerField(help_text='г.', verbose_name='Вес')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Форм-фактор и габариты',
                'verbose_name_plural': 'Форм-фактор и габариты',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='FanCoolerSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_fans_included', models.IntegerField(verbose_name='Количество вентиляторов в комплекте')),
                ('max_number_installed_fans', models.IntegerField(verbose_name='Максимальное количество устанавливаемых вентиляторов')),
                ('dimensions_complete_fans', models.CharField(max_length=50, verbose_name='Размеры комплектных вентиляторов')),
                ('fan_color', models.CharField(max_length=25, verbose_name='Цвет вентиляторов')),
                ('max_rotation_speed', models.IntegerField(help_text='об/мин', verbose_name='Максимальная скорость вращения')),
                ('min_rotation_speed', models.IntegerField(help_text='об/мин', verbose_name='Минимальная скорость вращения')),
                ('rotation_speed_adjustment', models.CharField(default='Автоматическая', max_length=15, verbose_name='Регулировка скорости вращения')),
                ('max_airflow', models.DecimalField(decimal_places=2, help_text='CFM', max_digits=4, verbose_name='Максимальный воздушный поток')),
                ('max_static_pressure', models.DecimalField(decimal_places=2, help_text='Па', max_digits=4, verbose_name='Максимальное статическое давление')),
                ('max_noise_level', models.DecimalField(decimal_places=2, help_text='дБ', max_digits=4, verbose_name='Максимальный уровень шума')),
                ('rated_current', models.DecimalField(decimal_places=2, help_text='А', max_digits=4, verbose_name='Номинальный ток')),
                ('rated_voltage', models.DecimalField(decimal_places=2, help_text='В', max_digits=4, verbose_name='Номинальное напряжение')),
                ('bearing_type', models.CharField(max_length=50, verbose_name='Тип подшипника')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Вентилятор',
                'verbose_name_plural': 'Вентилятор',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='FactoryDataVideoCartSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('warranty', models.IntegerField(verbose_name='Гарантия от производителя')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Заводские данные',
                'verbose_name_plural': 'Заводские данные',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='FactoryDataSolidStateDriveSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('warranty', models.IntegerField(verbose_name='Гарантия')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Заводские данные',
                'verbose_name_plural': 'Заводские данные',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='FactoryDataRamSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('warranty', models.IntegerField(verbose_name='Страна-производитель')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Заводские данные',
                'verbose_name_plural': 'Заводские данные',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='FactoryDataProcessorSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guarantee', models.IntegerField(verbose_name='Гарантия от производителя')),
                ('producing_country', models.CharField(max_length=50, verbose_name='Страна производитель')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Заводские данные',
                'verbose_name_plural': 'Заводские данные',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='FactoryDataPowerSupplySpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('warranty', models.IntegerField(verbose_name='Гарантия от производителя')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Заводские данные',
                'verbose_name_plural': 'Заводские данные',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='FactoryDataMotherboardSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufacturer_warranty', models.IntegerField(verbose_name='Гарантия от производителя')),
                ('producing_country', models.CharField(max_length=100, verbose_name='Страна-производитель')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Заводские данные',
                'verbose_name_plural': 'Заводские данные',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='FactoryDataHDDSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('warranty', models.IntegerField(verbose_name='Гарантия от производителя')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Заводские данные',
                'verbose_name_plural': 'Заводские данные',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='FactoryDataCoolerSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('warranty', models.IntegerField(verbose_name='Гарантия от производителя')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Заводские данные',
                'verbose_name_plural': 'Заводские данные',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='FactoryDataComputerCaseSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('warranty', models.IntegerField(verbose_name='Гарантия от производителя')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Заводские данные',
                'verbose_name_plural': 'Заводские данные',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='ExpansionSlotsMotherboardSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pci_express_version', models.DecimalField(decimal_places=2, max_digits=3, verbose_name='Версия PCI Express')),
                ('number_x16_slots', models.IntegerField(verbose_name='Количество слотов PCI-E x16')),
                ('sli_crossfire_support', models.CharField(max_length=25, verbose_name='Поддержка SLI/Crossfire')),
                ('number_cards_sli', models.IntegerField(help_text='шт.', verbose_name='Количество карт в SLI/Crossfire')),
                ('number_x1_slots', models.IntegerField(verbose_name='Количество слотов PCI-E x1')),
                ('other_expansions_slots', models.CharField(max_length=100, verbose_name='Поддержка других слотов')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Слоты расширения',
                'verbose_name_plural': 'Слоты расширения',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='ElectricalParametersPowerSupplySpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_plus_12', models.DecimalField(decimal_places=2, help_text='Вт', max_digits=3, verbose_name='Ток по линии +12 В')),
                ('current_3_3', models.DecimalField(decimal_places=2, help_text='Вт', max_digits=3, verbose_name='Ток по линии 3.3 В')),
                ('current_5', models.DecimalField(decimal_places=2, help_text='Вт', max_digits=3, verbose_name='Ток по линии 5 В')),
                ('standby_current', models.DecimalField(decimal_places=2, help_text='Вт', max_digits=3, verbose_name='Ток дежурного источника (+5 В Standby)')),
                ('line_current_minus_12', models.DecimalField(decimal_places=2, help_text='Вт', max_digits=3, verbose_name='Ток по линии -12 В')),
                ('mains_input_voltage_range', models.CharField(default='100-240 В. 50/60 Гц', help_text='Вт', max_length=25, verbose_name='Диапазон входного напряжения сети')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Электрические параметры',
                'verbose_name_plural': 'Электрические параметры',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='DriveConfigurationSolidStateDriveSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_bits_per_cell', models.IntegerField(verbose_name='Количество бит на ячейку')),
                ('memory_structure', models.CharField(max_length=25, verbose_name='Структура памяти')),
                ('dram_buffer', models.BooleanField(default=False, verbose_name='Наличие DRAM-буфера')),
                ('size_dram_buffer', models.IntegerField(help_text='МБ', verbose_name='Размер DRAM-буфера')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Конфигурация накопителя',
                'verbose_name_plural': 'Конфигурация накопителя',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='DimensionsWeightPowerSupplySpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('length', models.IntegerField(help_text='мм.', verbose_name='Длина')),
                ('width', models.IntegerField(help_text='мм.', verbose_name='Ширина')),
                ('height', models.IntegerField(help_text='мм.', verbose_name='Высота')),
                ('weight', models.IntegerField(help_text='г.', verbose_name='Вес')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Габариты и вес',
                'verbose_name_plural': 'Габариты и вес',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='DimensionsSolidStateDriveSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('length', models.IntegerField(help_text='мм.', verbose_name='Длина')),
                ('width', models.IntegerField(help_text='мм.', verbose_name='Ширина')),
                ('height', models.IntegerField(help_text='мм.', verbose_name='Высота')),
                ('weight', models.IntegerField(help_text='г.', verbose_name='Вес')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Габариты, вес',
                'verbose_name_plural': 'Габариты, вес',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='DimensionsHDDSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('length', models.IntegerField(help_text='мм.', verbose_name='Длина')),
                ('width', models.IntegerField(help_text='мм.', verbose_name='Ширина')),
                ('height', models.IntegerField(help_text='мм.', verbose_name='Высота')),
                ('weight', models.IntegerField(help_text='г.', verbose_name='Вес')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Габариты, вес',
                'verbose_name_plural': 'Габариты, вес',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='DimensionsCoolerSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('length', models.IntegerField(help_text='мм.', verbose_name='Длина')),
                ('width', models.IntegerField(help_text='мм.', verbose_name='Ширина')),
                ('height', models.IntegerField(help_text='мм.', verbose_name='Высота')),
                ('weight', models.IntegerField(help_text='г.', verbose_name='Вес')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Габариты',
                'verbose_name_plural': 'Габариты',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='DimensionsAndWightVideoCartSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('low_profile', models.BooleanField(default=False, verbose_name='Низкопрофильная карта')),
                ('number_occupied_expansion_slots', models.IntegerField(verbose_name='Количество занимаемых слотов расширения')),
                ('length', models.IntegerField(help_text='мм.', verbose_name='Длина')),
                ('thickness', models.IntegerField(help_text='мм.', verbose_name='Толщина')),
                ('weight', models.IntegerField(help_text='г.', verbose_name='Вес')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Габариты и вес',
                'verbose_name_plural': 'Габариты и вес',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='DesignRamSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('presence_radiator', models.BooleanField(default=False, verbose_name='Наличие радиатора')),
                ('radiator_color', models.CharField(max_length=25, verbose_name='Цвет радиатора')),
                ('illumination_board_elements', models.BooleanField(default=False, verbose_name='Подсветка элементов')),
                ('height', models.IntegerField(help_text='мм.', verbose_name='Высота')),
                ('low_profile', models.BooleanField(default=False, verbose_name='Низкопрофильная')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Конструкция',
                'verbose_name_plural': 'Конструкция',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CoreArchitectureProcessorSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_cores', models.IntegerField(verbose_name='Количество ядер')),
                ('maximum_threads', models.IntegerField(verbose_name='Количество потоков')),
                ('number_performance', models.IntegerField(verbose_name='Количество производительных ядер')),
                ('number_energy_efficient', models.IntegerField(verbose_name='Количество энергоэффективных ядер')),
                ('l2_cache_size', models.IntegerField(verbose_name='Объем кэша L2')),
                ('l3_cache_size', models.IntegerField(verbose_name='Объем кэша L3')),
                ('process_technology', models.IntegerField(verbose_name='Техпроцесс')),
                ('nucleus', models.CharField(help_text='Название ядра', max_length=50, verbose_name='Ядро')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Ядро и архитектура процессора',
                'verbose_name_plural': 'Ядра и архитектура процессора',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CoolingSystemVideoCartSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cooling_type', models.CharField(max_length=25, verbose_name='Тип система охлаждения')),
                ('number_installed_fans', models.IntegerField(verbose_name='Количество установленных вентиляторов')),
                ('liquid_cooling_radiator', models.BooleanField(default=False, verbose_name='Радиатор жидкостного охлаждения')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Система охлаждения',
                'verbose_name_plural': 'Система охлаждения',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CoolingSystemPowerSupplySpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cooling_system', models.CharField(max_length=25, verbose_name='Система охлаждения')),
                ('fan_dimensions', models.CharField(max_length=25, verbose_name='Размеры вентиляторов')),
                ('speed_control', models.CharField(max_length=25, verbose_name='Регулировка оборотов вентиляторов')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Система охлаждения',
                'verbose_name_plural': 'Система охлаждения',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CoolingPowerMotherboardSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_power_connector', models.CharField(max_length=10, verbose_name='Основной разъем питания')),
                ('cpu_power_connector', models.CharField(max_length=10, verbose_name='Разъем питания процессора')),
                ('number_power_phases', models.IntegerField(verbose_name='Количество фаз питания')),
                ('passive_cooling', models.BooleanField(default=False, verbose_name='Пассивное охлаждение')),
                ('active_cooling', models.BooleanField(default=False, verbose_name='Активное охлаждение')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Охлаждение и питание',
                'verbose_name_plural': 'Охлаждение и питание',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CoolingComputerCaseSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fans_included', models.BooleanField(default=False, verbose_name='Наличие вентиляторов в комплекте')),
                ('front_fan_support', models.CharField(max_length=25, verbose_name='Поддержка фронтальных вентиляторов')),
                ('rear_fan_support', models.CharField(max_length=25, verbose_name='Поддержка тыловых вентиляторов')),
                ('top_fan_support', models.CharField(max_length=25, verbose_name='Поддержка верхних вентиляторов')),
                ('bottom_fan_support', models.CharField(max_length=25, verbose_name='Поддержка нижних вентиляторов')),
                ('side_fan_support', models.CharField(max_length=25, verbose_name='Поддержка боковых вентиляторов')),
                ('installing_liquid_cooling_system', models.BooleanField(default=False, verbose_name='Возможно установки системы жидкостного охлаждения')),
                ('rear_mounting_dimension_radiator', models.CharField(max_length=25, verbose_name='Тыловой монтажный размер радиатора СВО')),
                ('side_mounting_dimension_radiator', models.CharField(max_length=25, verbose_name='Боковой монтажный размер радиатора СВО')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Охлаждение',
                'verbose_name_plural': 'Охлаждение',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='ConnectionVideoCartSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interface', models.CharField(max_length=25, verbose_name='Интерфейс подключения')),
                ('connector_form_factor', models.CharField(max_length=25, verbose_name='Форм-фактор разъема подключения')),
                ('auxiliary_power_connectors', models.CharField(max_length=25, verbose_name='Разъемы дополнительного питания')),
                ('recommended_power_supply', models.IntegerField(help_text='Вт', verbose_name='Рекомендуемый блок питания')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Подключение',
                'verbose_name_plural': 'Подключение',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CompositionRamSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('DDR', 'Ddr'), ('DDR2', 'Ddr 2'), ('DDR3', 'Ddr 3'), ('DDR4', 'Ddr 4'), ('DDR5', 'Ddr 5')], max_length=10, verbose_name='Тип памяти')),
                ('form_factor', models.CharField(choices=[('DDR DIMM', 'Ddr'), ('SDRAM DIMM', 'Sdram'), ('SIMM (72-pin)', 'Simm 72'), ('SIPP', 'Sipp'), ('SIMM (30-pin)', 'Simm 30')], max_length=15, verbose_name='Форм-фактор')),
                ('one_memory_module', models.IntegerField(help_text='Гб', verbose_name='Объем одного модуля памяти')),
                ('number_modules_included', models.IntegerField(verbose_name='Количество модулей в комплекте')),
                ('register_memory', models.BooleanField(default=False, verbose_name='Регистровая память')),
                ('ecc_memory', models.BooleanField(default=False, verbose_name='ECC-память')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Объем и состав комплекта',
                'verbose_name_plural': 'Объем и состав комплекта',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CompatibilityComputerCaseSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compatible_board_form_factor', models.CharField(max_length=50, verbose_name='Форм-фактор совместимых плат')),
                ('form_factor_compatible_power_supplies', models.CharField(max_length=50, verbose_name='Форм фактор совместимых блоков питания')),
                ('placement_power_supply', models.CharField(choices=[('Верхнее', 'Up'), ('Нижнее', 'Down')], max_length=7, verbose_name='Расположение блока питания')),
                ('horizontal_expansion_slots', models.IntegerField(verbose_name='Горизонтальные слоты расширения')),
                ('vertical_expansion_slots', models.IntegerField(verbose_name='Вертикальные слоты расширения')),
                ('max_length_installed_video_card', models.IntegerField(help_text='мм.', verbose_name='Максимальная длина устанавливаемой видеокарты')),
                ('max_cpu_cooler_height', models.IntegerField(help_text='мм.', verbose_name='Максимальная высота устанавливаемого кулера')),
                ('number_2_5_drive_bays', models.IntegerField(help_text='шт', verbose_name='Количество отсеков 2.5" накопителей')),
                ('number_internal_3_5_bays', models.IntegerField(help_text='шт', verbose_name='Количество внутренних отсеков 3.5" ')),
                ('number_external_3_5_bays', models.IntegerField(help_text='шт', verbose_name='Количество внешних отсеков 3.5" ')),
                ('number_bays_5_25', models.IntegerField(help_text='шт', verbose_name='Число отсеков 5.25"')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Совместимость',
                'verbose_name_plural': 'Совместимость',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CommonParametersVideoCartSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='Видеокарта', max_length=25, verbose_name='Тип')),
                ('model', models.CharField(db_index=True, max_length=50, verbose_name='Модель')),
                ('manufacturer_code', models.CharField(max_length=50, verbose_name='Код производителя')),
                ('designed_mining', models.BooleanField(default=False, verbose_name='Предназначена для майнинга')),
                ('lhr', models.BooleanField(default=False, verbose_name='LHR')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Общие параметры',
                'verbose_name_plural': 'Общие параметры',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CommonParametersSolidStateDriveSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='SSD накопитель', max_length=15, verbose_name='Тип')),
                ('model', models.CharField(max_length=50, verbose_name='Модель')),
                ('manufacturer_code', models.CharField(max_length=50, verbose_name='Код производителя')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Общие параметры',
                'verbose_name_plural': 'Общие параметры',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CommonParametersRamSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='Оперативная память', max_length=50, verbose_name='Тип')),
                ('model', models.CharField(max_length=50, verbose_name='Модель')),
                ('manufacturer_code', models.CharField(max_length=50, verbose_name='Код производителя')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Общие параметры',
                'verbose_name_plural': 'Общие параметры',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CommonParametersProcessorSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(db_index=True, max_length=50, unique=True, verbose_name='Модель процессора')),
                ('socket', models.CharField(max_length=50, verbose_name='Сокет')),
                ('manufacturer_code', models.CharField(max_length=50, verbose_name='Код производителя')),
                ('release_year', models.DateField(verbose_name='Дата производства')),
                ('cooling_system', models.BooleanField(default=False, help_text='Наличие охлаждения в комплекте', verbose_name='Система охлаждения')),
                ('thermal_interface', models.BooleanField(default=False, help_text='Наличие термоинтерфейса в комплекте', verbose_name='Термоинтерфейс')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Общие параметры',
                'verbose_name_plural': 'Общие параметры',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CommonParametersPowerSupplySpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='Блок питания', max_length=50, verbose_name='Тип')),
                ('model', models.CharField(max_length=50, verbose_name='Модель')),
                ('manufacturer_code', models.CharField(max_length=50, verbose_name='Код производителя')),
                ('power', models.IntegerField(help_text='Вт', verbose_name='Мощность')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Общие параметры',
                'verbose_name_plural': 'Общие параметры',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CommonParametersMotherboardSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='Материнская плата', max_length=50, verbose_name='Тип')),
                ('model', models.CharField(db_index=True, max_length=50, verbose_name='Модель')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Общие параметры',
                'verbose_name_plural': 'Общие параметры',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CommonParametersHDDSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='HDD', max_length=15, verbose_name='Тип')),
                ('model', models.CharField(max_length=50, verbose_name='Модель')),
                ('manufacturer_code', models.CharField(max_length=50, verbose_name='Код производителя')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Общие параметры',
                'verbose_name_plural': 'Общие параметры',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CommonParametersCoolerSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='Кулер для процессора', max_length=20, verbose_name='Тип')),
                ('model', models.CharField(max_length=25, verbose_name='Модель')),
                ('socket', models.CharField(max_length=100, verbose_name='Сокет')),
                ('power_dissipation', models.IntegerField(help_text='Вт', verbose_name='Рассеиваемая мощность')),
                ('construction_type', models.CharField(max_length=25, verbose_name='Тип конструкции')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Общие данные',
                'verbose_name_plural': 'Общие данные',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CommonParametersComputerCaseSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='Корпус', max_length=25, verbose_name='Тип')),
                ('model', models.CharField(max_length=25, verbose_name='Модель')),
                ('manufacturer_code', models.CharField(max_length=25, verbose_name='Код производителя')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Общие параметры',
                'verbose_name_plural': 'Общие параметры',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CertificationPowerSupplySpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate_80_plus', models.CharField(choices=[('PLUS', 'Plus'), ('Bronze', 'Bronze'), ('Silver', 'Silver'), ('Gold', 'Gold'), ('Platinum', 'Platinum'), ('Titanium', 'Titanium')], max_length=8, verbose_name='Сертификат 80 PLUS')),
                ('pfc', models.CharField(max_length=25, verbose_name='Корректор коэффициента мощности')),
                ('protection_technologies', models.CharField(max_length=25, verbose_name='Технологии защиты')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Сертификация',
                'verbose_name_plural': 'Сертификация',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='CablesConnectorsPowerSupplySpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_power_connector', models.CharField(max_length=25, verbose_name='Основной разъем питания')),
                ('processor_power', models.CharField(max_length=10, verbose_name='Разъемы питания для процессора')),
                ('video_card_power', models.CharField(max_length=10, verbose_name='Разъемы питания для видеокарты')),
                ('number_connectors_15pin_sata', models.IntegerField(verbose_name='Количество разъемов 15-pin SATA')),
                ('number_4pin_molex', models.IntegerField(verbose_name='Количество разъемов 4-pin Molex')),
                ('connector_4pin_floppy', models.BooleanField(default=False, verbose_name='Наличие кабеля питания для дисковода')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Кабели и разъемы',
                'verbose_name_plural': 'Кабели и разъемы',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='BusControllersProcessorSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('integrated_pci_controller', models.CharField(max_length=50, verbose_name='Встроенный контроллер PCI Express')),
                ('number_pci_lanes', models.IntegerField(verbose_name='Число линий PCI Express')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Шина и контроллеры',
                'verbose_name_plural': 'Шина и контроллеры',
                'ordering': ['product'],
            },
        ),
        migrations.AddField(
            model_name='brandproduct',
            name='categories',
            field=models.ManyToManyField(help_text='Категории, с которыми работает данный бренд', to='shop_products.categoryproduct', verbose_name='Категории'),
        ),
        migrations.CreateModel(
            name='BackPanelMotherboardSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_type_usb', models.CharField(max_length=100, verbose_name='Количество и тип USB на задней панели')),
                ('video_outputs', models.CharField(max_length=50, verbose_name='Видеовыходы')),
                ('number_network_ports', models.IntegerField(verbose_name='Количество сетевых портов (RJ-45)')),
                ('number_analog_audio', models.IntegerField(verbose_name='Количество аналоговых аудио разъемов')),
                ('digital_audio_ports', models.CharField(max_length=50, verbose_name='Цифровые аудио порты (S/PDIF)')),
                ('other_connectors', models.CharField(max_length=150, verbose_name='Другие разъемы на задней панели')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Задняя панель',
                'verbose_name_plural': 'Задняя панель',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='AudioMotherboardSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sound_scheme', models.CharField(max_length=10, verbose_name='Звуковая схема')),
                ('audio_adapter', models.CharField(max_length=50, verbose_name='Чипсет звукового адаптера')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Аудио',
                'verbose_name_plural': 'Аудио',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='AppearancePowerSupplySpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form_factor', models.CharField(choices=[('ATX', 'Atx'), ('SFX', 'Sfx'), ('TFX', 'Tfx'), ('FLEX', 'Flex')], max_length=10, verbose_name='Форм-фактор')),
                ('color', models.CharField(max_length=25, verbose_name='Цвет')),
                ('datachable_cables', models.BooleanField(default=False, verbose_name='Отстегивающиеся провода')),
                ('wire_braid', models.BooleanField(default=False, verbose_name='Наличие оплетки проводов')),
                ('backlight_type', models.BooleanField(default=False, verbose_name='Тип подсветки')),
                ('wire_colors', models.CharField(max_length=25, verbose_name='Цвет проводов')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Внешний вид',
                'verbose_name_plural': 'Внешний вид',
                'ordering': ['product'],
            },
        ),
        migrations.CreateModel(
            name='AppearanceComputerCaseSpecifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_color', models.CharField(max_length=25, verbose_name='Основной цвет')),
                ('housing_material', models.CharField(max_length=25, verbose_name='Материал корпуса')),
                ('metal_thickness', models.IntegerField(verbose_name='Толщина метала')),
                ('window_side_wall', models.BooleanField(default=False, verbose_name='Наличие окна на боковой стенки')),
                ('window_material', models.CharField(max_length=25, verbose_name='Материал окна')),
                ('front_panel_material', models.CharField(max_length=25, verbose_name='Материал на передней панели')),
                ('backlight_type', models.CharField(choices=[('LED', 'Led'), ('RGB', 'Rgb'), ('ARGB', 'Argb'), ('DRGB', 'Drgb'), ('FRGB', 'Frgb')], max_length=10, verbose_name='Тип подсветки')),
                ('backlight_color', models.CharField(max_length=25, verbose_name='Цвет подсветки')),
                ('backlight_source', models.CharField(max_length=10, verbose_name='Источник подсветки')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop_products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Внешний вид',
                'verbose_name_plural': 'Внешний вид',
                'ordering': ['product'],
            },
        ),
    ]
